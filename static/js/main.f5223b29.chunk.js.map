{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","parseInt","heightToMeter","bmi","Math","round","inches","heightToInches","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5223b29.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormInput = props => {\n\tconst {\n\t\tname,\n\t\ttype,\n\t\ttitle,\n\t\tvalue,\n\t\tonChange\n\t} = props;\n\treturn (\n\t\t<div className=\"input-groups\">\n\t\t\t<span className=\"label\">{title}</span>\n\t\t\t<div className=\"range-container\">\n\t\t\t\t<input \n\t\t\t\t\ttype={type}\n\t\t\t\t\tname={name}\n\t\t\t\t\tclassName=\"range-input\"\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tautoComplete=\"false\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nFormInput.propTypes = {\n\ttitle: PropTypes.string,\n\tvalue: PropTypes.string,\n\tonChange: PropTypes.func.isRequired,\n\ttype: PropTypes.oneOf(['text'])\n}\n\nexport default FormInput","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\n\nimport FormInput from './FormInput';\n\nconst BmiCalculator = props => {\n\tconst { getBmiValue } = props;\n\n\tconst [heightUnit, setHeightUnit] = useState('cm');\n\tconst [weightUnit, setWeightUnit] = useState('kg');\n\tconst [unit , setUnit] = useState('Metric');\n\tconst [count, setCount] = useState({\n\t\theightCount: '0',\n\t\tinchesCount: '0',\n\t\tweightCount: '0'\n\t});\n\n\tconst { heightCount, inchesCount, weightCount } = count;\n\n\tuseEffect(() => {\n\t\tmetricBMI(heightCount, weightCount);\n\t\timperialBMI(heightCount, weightCount, inchesCount);\n\n\t\t// eslint-disable-next-line\n\t}, [heightCount, weightCount, inchesCount]);\n\n\tconst onChangeInput = e => {\n\t\tconst { name, value } = e.target;\n\n\t\tsetCount(prevState => ({\n\t\t\t...prevState,\n\t\t\t[name]: value\n\t\t}));\n\t}\n\n\n\tconst onSelectTag = e => {\n\t\tsetUnit(e.target.value);\n\t\tif (e.target.value === 'Metric') {\n\t\t\tsetHeightUnit('cm');\n\t\t\tsetWeightUnit('kg');\n\t\t} else {\n\t\t\tsetHeightUnit('ft');\n\t\t\tsetWeightUnit('lbs');\n\t\t}\n\t}\n\n\tconst metricBMI = (height, weight) => {\n\t\tif ( parseInt(height) > 0 && parseInt(weight) > 0 ) {\n\t\t\tconst heightToMeter = height / 100;\n\t\t\tconst bmi = weight / (heightToMeter * heightToMeter);\n\n\t\t\tgetBmiValue(Math.round(bmi));\n\t\t}\n\t}\n\n\tconst imperialBMI = (height, weight, inches) => {\n\t\tif ( height > 0 && weight > 0 ) {\n\t\t\t// 12 inches = ft\n\t\t\t// convert ft to in\n\t\t\t// add it to the inches value\n\n\t\t\tconst heightToInches = (height * 12) + parseInt(inches);\n\n\t\t\tconst bmi = 703 * (weight / (heightToInches * heightToInches));\n\n\t\t\tgetBmiValue(Math.round(bmi));\n\t\t}\n\t}\n\n\tconst resetData = e => {\n\t\te.preventDefault();\n\t\t\n\t\tgetBmiValue(0);\n\t\tsetUnit('Metric');\n\n\t\tsetCount({\n\t\t\theightCount: '0',\n\t\t\tinchesCount: '0',\n\t\t\tweightCount: '0'\n\t\t});\n\n\t\tsetHeightUnit('cm');\n\t\tsetWeightUnit('kg');\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"bmi-inputs\">\n\t\t\t\t<div className=\"input-fields\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className=\"label-unit\">Unit</span>\n\t\t\t\t\t\t<div className=\"unit\">\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname=\"unit\"\n\t\t\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\t\t\tonChange={onSelectTag}\n\t\t\t\t\t\t\t\tclassName=\"form-control form-control-sm\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"Metric\">Metric</option>\n\t\t\t\t\t\t\t\t<option value=\"Imperial\">Imperial</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"heightCount\"\n\t\t\t\t\t\ttitle={`Height (${heightUnit})`}\n\t\t\t\t\t\tvalue={heightCount}\n\t\t\t\t\t\tonChange={onChangeInput}\n\t\t\t\t\t/>\n\t\t\t\t\t{\n\t\t\t\t\t\tunit === 'Imperial' ? \n\t\t\t\t\t\t<FormInput \n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"inchesCount\"\n\t\t\t\t\t\t\ttitle={` (in)`}\n\t\t\t\t\t\t\tvalue={inchesCount}\n\t\t\t\t\t\t\tonChange={onChangeInput}\n\t\t\t\t\t\t/> : ''\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t<FormInput \n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"weightCount\"\n\t\t\t\t\t\ttitle={`Weight (${weightUnit})`}\n\t\t\t\t\t\tvalue={weightCount}\n\t\t\t\t\t\tonChange={onChangeInput}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<button className=\"button\" type=\"submit\" onClick={resetData}>Reset</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nBmiCalculator.propTypes = {\n\tgetBmiValue: PropTypes.func.isRequired\n}\n\n\nexport default BmiCalculator","import React, { useState } from 'react'\nimport BmiCalculator from './BmiCalculator';\n\n\nconst BMI = () => {\n\tconst [bmiValue, setBmiValue] = useState(0);\n\n\tconst getBmiClass = bmi => {\n\t\tif ( bmi >= 0 && bmi <= 18.5 ) return 'Underweight';\n\t\tif ( bmi >= 18.5 && bmi <= 24.9 ) return 'Normal Weight';\n\t\tif ( bmi >= 24.9 && bmi <= 29.9 ) return 'Overweight';\n\t\tif ( bmi >= 30 ) return 'Obese';\n\t}\n\n\tconst bmiBackgroundColor = bmi => {\n\t\tif ( bmi >= 0 && bmi <= 18.5 ) return '#FED88B';\n\t\tif ( bmi >= 18.5 && bmi <= 24.9 ) return '#80ff80';\n\t\tif ( bmi >= 24.9 && bmi <= 29.9 ) return '#FF7F50';\n\t\tif ( bmi >= 30 ) return '#FF5411';\n\t}\n\n\tconst bmiCategory = getBmiClass(bmiValue);\n\n\tlet bmiClass = '';\n\n\tif (bmiValue >= 0 && bmiCategory) {\n\t\tbmiClass = bmiCategory.split(' ')[0].toLowerCase();\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"calculator\" style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}>\n\t\t\t\t<h3>Body Mass Index Calculator</h3>\n\t\t\t\t<div className=\"bmi-result-container\">\n\t\t\t\t\t<div className=\"bmi-result\">\n\t\t\t\t\t\t<div className=\"bmi-result-number\">\n\t\t\t\t\t\t\tBody Mass Index (BMI) = {bmiValue}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={`bmi-category ${bmiClass}`}>\n\t\t\t\t\t\t\t{bmiCategory}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<BmiCalculator getBmiValue={setBmiValue} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default BMI;\n\n//named export would be export { BmiCalculator };","import React from 'react';\nimport './App.css';\nimport BMI from './components/BMI';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App container\">\n\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t<div className=\"col-lg-6 col-lg-offset-3\">\n\t\t\t\t\t<BMI />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}